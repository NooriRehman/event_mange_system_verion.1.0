/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package event_management_system_noori;

/**
 *
 * @author noori
 */
import com.mysql.cj.xdevapi.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class remove extends javax.swing.JFrame {

    /**
     * Creates new form remove
     */
    public remove() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        delete_button = new javax.swing.JButton();
        back_remove_page_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        adding_events3 = new javax.swing.JTable();
        searchbutton = new javax.swing.JButton();
        view_all = new javax.swing.JButton();
        search_id_field = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setText("Event Management System:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("Deleting event:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Search the  event category . Then select the event to delete.");

        delete_button.setBackground(new java.awt.Color(204, 204, 255));
        delete_button.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        delete_button.setForeground(new java.awt.Color(102, 0, 102));
        delete_button.setText("Delete events");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        back_remove_page_button.setBackground(new java.awt.Color(255, 204, 255));
        back_remove_page_button.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        back_remove_page_button.setForeground(new java.awt.Color(102, 0, 102));
        back_remove_page_button.setText("Back");
        back_remove_page_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_remove_page_buttonActionPerformed(evt);
            }
        });

        adding_events3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "event_id", "event_category", "manager_name", "contact_number", "timing", "days", "event_capacity", "location"
            }
        ));
        jScrollPane1.setViewportView(adding_events3);

        searchbutton.setBackground(new java.awt.Color(204, 204, 255));
        searchbutton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchbutton.setForeground(new java.awt.Color(102, 0, 102));
        searchbutton.setText("Search");
        searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbuttonActionPerformed(evt);
            }
        });

        view_all.setBackground(new java.awt.Color(204, 204, 255));
        view_all.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        view_all.setForeground(new java.awt.Color(102, 0, 102));
        view_all.setText("View  all my Events ");
        view_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_allActionPerformed(evt);
            }
        });

        search_id_field.setText("Enter Event Id");
        search_id_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_id_fieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(back_remove_page_button)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search_id_field, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(view_all)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                        .addComponent(delete_button)
                        .addGap(291, 291, 291))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(back_remove_page_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchbutton)
                    .addComponent(search_id_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(view_all)
                    .addComponent(delete_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addGap(65, 65, 65))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void back_remove_page_buttonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
         Admin_dashboard ad=new Admin_dashboard();
        ad.setVisible(true);
        ad.pack();
        ad.setLocationRelativeTo(null);
       this.dispose();
    }                                                       

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
         try {
    // Check if any row is selected in the JTable
    int selectedRow = adding_events3.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select an event to delete.");
        return;
    }

    // Get the Event ID of the selected row
    String eventId = (String) adding_events3.getValueAt(selectedRow, 1); // Assuming Event ID is in the 2nd column (index 1)

    // Confirm the deletion
    int confirm = JOptionPane.showConfirmDialog(
        null,
        "Are you sure you want to delete the selected event?",
        "Confirm Deletion",
        JOptionPane.YES_NO_OPTION
    );

    if (confirm == JOptionPane.YES_OPTION) {
        // Establish a database connection
        Connection con = DatabaseConnection.getInstance().getConnection();

        // Query to delete the event
        String query = "DELETE FROM adding_events3 WHERE event_id = ?";
        PreparedStatement pstmt = con.prepareStatement(query);
        pstmt.setString(1, eventId);

        // Execute the delete operation
        int rowsAffected = pstmt.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Event deleted successfully.");

            // Remove the deleted row from the JTable
            DefaultTableModel tableModel = (DefaultTableModel) adding_events3.getModel();
            tableModel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(null, "Failed to delete the event. Event ID not found.");
        }

        // Close the connection
        con.close();
    }
} catch (SQLException ex) {
    // Print the SQL exception for debugging
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
} catch (Exception ex) {
    // Print other exceptions for debugging
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Unexpected error: " + ex.getMessage());
}

       
    }                                             

    private void view_allActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        
try {
    // Establish a database connection
    Connection con = DatabaseConnection.getInstance().getConnection();

    // Query to fetch all events
    String query = "SELECT * FROM adding_events3";

    // Prepare and execute the statement
    PreparedStatement pstmt = con.prepareStatement(query);
    ResultSet rs = pstmt.executeQuery();

    // Access the table model of the JTable
    DefaultTableModel tableModel = (DefaultTableModel) adding_events3.getModel();
    tableModel.setRowCount(0); // Clear the table before adding new data

    // Iterate through the result set and populate the JTable
    while (rs.next()) {
        Object[] row = {
            rs.getString("event_category"),
            rs.getString("event_id"),
            rs.getString("contact_number"),
            rs.getString("manager_name"),
            rs.getString("timing"),
            rs.getString("days"),        // Assuming "days" is a text column
            rs.getInt("event_capacity"), // Assuming "event_capacity" is an integer column
            rs.getString("location")
        };
        tableModel.addRow(row); // Add the row to the JTable
    }

    // Close the connection
    con.close();
} catch (SQLException ex) {
    // Print the SQL exception for debugging
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
} catch (Exception ex) {
    // Print other exceptions for debugging
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Unexpected error: " + ex.getMessage());
}

    }                                        

    private void search_id_fieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void searchbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
       try {
    // Get the Event ID from the search field
    String eventId = search_id_field.getText().trim();

    // Check if the search field is empty
    if (eventId.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter an Event ID to search.");
        return;
    }

    // Establish a database connection
    Connection con = DatabaseConnection.getInstance().getConnection();

    // Prepare the SQL query
    String query = "SELECT * FROM adding_events3 WHERE event_id = ?";
    PreparedStatement pstmt = con.prepareStatement(query);
    pstmt.setString(1, eventId);

    // Execute the query
    ResultSet rs = pstmt.executeQuery();

    // Access the table model of the JTable
    DefaultTableModel tableModel = (DefaultTableModel) adding_events3.getModel();
    tableModel.setRowCount(0); // Clear the table before adding new data

    // Check if the result set contains any data
    if (rs.next()) {
        // Add the event details to the JTable
        Object[] row = {
            rs.getString("event_category"),
            rs.getString("event_id"),
            rs.getString("contact_number"),
            rs.getString("manager_name"),
            rs.getString("timing"),
            rs.getString("days"),        // Assuming "days" is a text column
            rs.getInt("event_capacity"), // Assuming "event_capacity" is an integer column
            rs.getString("location")
        };
        tableModel.addRow(row);
    } else {
        // Show a message if no event matches the entered Event ID
        JOptionPane.showMessageDialog(null, "No event found with the given Event ID.");
    }

    // Close the connection
    con.close();
} catch (SQLException ex) {
    // Print the SQL exception for debugging
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
} catch (Exception ex) {
    // Print other exceptions for debugging
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Unexpected error: " + ex.getMessage());
}

    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(remove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(remove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(remove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(remove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new remove().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTable adding_events3;
    private javax.swing.JButton back_remove_page_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search_id_field;
    private javax.swing.JButton searchbutton;
    private javax.swing.JButton view_all;
    // End of variables declaration                   
}
